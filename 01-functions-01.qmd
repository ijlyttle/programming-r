---
title: "useR to programmeR"
subtitle: "👋 & Functions 1"
author: "Emma Rand and Ian Lyttle"
format: 
  revealjs:
    theme: [simple]
    slide-number: true
    chalkboard: true
    code-link: true
    code-line-numbers: false
---

# 👋 Welcome

## Introductions

This is a two-day, hands-on workshop for those who have embraced the tidyverse and want to build their own packages.

-   Have you written a few of your own R functions?
-   Are you ready to start sharing your code (or data) through R packages?
-   Are you curious what you can do to make your first R packages easy for your users to use, and for you to maintain?

\

### WiFi

-   Username: `conf22`
-   Password: `together!`

## The team

::: columns
::: {.column width="50%"}
Emma Rand 🐦[\@er13_r](https://twitter.com/er13_r)

TA
:::

::: {.column width="50%"}
Ian Lyttle 🐦[\@ijlyttle](https://twitter.com/ijlyttle)

TA
:::
:::

 

Standing on the shoulders of [R for Data Science (2e)](https://r4ds.hadley.nz/)

\

### WiFi TOFIX

-   Username: `conf22`
-   Password: `together!`

## Introductions

To each other!

## Code of Conduct TOFIX

[Full Code of Conduct & COVID](https://www.rstudio.com/conference/2022/2022-conf-code-of-conduct/). **Please Review**

-   😷 Please wear a mask
-   💙 Treat everyone with respect
-   🧡 Everyone should feel welcome

Reporting:

-   🗣️ any posit::conf staff member, xxx is our contact
-   📧 `cc@cccccc.com`
-   ☎️ +

## Housekeeping TOFIX

-   WiFi:
    -   Username: `conf22`
    -   Password: `together!`
-   Gender neutral bathrooms xxxxxxxxx.
-   The meditation room is xxxxx. Open 8am - 5pm, Monday - Thursday.
-   The lactation room is located at xxxxx. Open 8am - 5pm, Monday - Thursday.
-   Participants who do not wish to be photographed have red lanyards, please note lanyard colors before taking a photo and respect their choices.

## 🙏 to

-   the TAs

-   colleagues, friends and learners at Schneider Electric, University of York and RForwards!

-   Posit team and especially Mine Çetinkaya-Rundel

. . .

-   Ian!

## Prerequisites TOFIX

You need a laptop with the following installed:

-   R version \>= 4.2 and RStudio \>= 2023.03
-   The following packages:

🎬 Detailed instructions for installing these are covered in [Prerequisites](pre-reqs.qmd)

## Schedule

------------------------------------------------------------------------

| Time          | Activity                                                                                                         |
|:----------------------------------|:------------------------------------|
| 09:00 - 10:30 | [Functions 1](01-functions-01.qmd) Introduction, vector and dataframe functions, indirection and tidy evaluation |
| 10:30 - 11:00 | *Coffee break*                                                                                                   |
| 11:00 - 12:30 | [Functions 2](02-functions-02.qmd) Plot functions, style and side effects                                        |
| 12:30 - 13:30 | *Lunch break*                                                                                                    |
| 13:30 - 15:00 | [Iteration 1](03-iteration-01.qmd) Introduction and modifying multiple columns                                   |
| 15:00 - 15:30 | *Coffee break*                                                                                                   |
| 15:30 - 17:00 | [Iteration 1](04-iteration-02.qmd) Reading and writing multiple files                                            |

## How we will work

-   stickies

    -   🟪 I'm all good, I'm done

    -   🟧 I could do with some help

-   Discord

-   no stupid questions

-   🎬 Action! (today)

## Learning Objectives

::: small
At the end of this section you will be able to:

-   xx
-   x
-   x
-   x
:::

# Set up

```{r}
#| eval: false

create_project("workshop-functions")
```

Create a `data` folder.

Save [rodents-mass.csv](data/rodents-mass.csv) and [colour-responses 1.csv](data/colour-responses 1.csv) 

`use_r()` new file for each function? or all functions in one file?? ?and tests?

data used?

# Why write functions?

## Rationale

-   impact from code: reach and clarity
-   efficiency: update code in one place, decrease error rate, improve ability to resuse

## Example

We have the mass of ten individuals from four species
```{r}

```


applying same transformation to several variables by c&p

## 

key point, you may think you have to write complex functions - you don't, start with the simple things.

# Types of function

## Types of function

We will cover two types of function 1. vector functions: one of more vectors as input, one vector as output i. output same length as input. "mutate" functions will work well in `mutate()` and `filter()`. this section will allow us to get the principles of writing functions ii. summary functions: input is vector, output is a single value 2. data frame functions: df as input and df as output

# Vector functions

## Output same length as input

-   output same length as input "mutate" functions will work well in `mutate()`
-   summary functions: input is vector, output is a single value

## Example

continued

## Example

to make into a functions you need

-   a name
-   the arguments - which represent the bits that vary
-   the codebody for the function

## General

``` r
name <- function(arguments) {
  body
}
```

## 

``` r
name <- function(arguments) {
  body
}
```

## 

``` r
myname <- function(x) {
  body using x
}
```

## 

possible example: function that turns a likert char vector into a factor with levels in the right order. rewrite this without across

## 

show data

```{r}
coloursurvey <- read_csv("data/colour-responses 1.csv") 
glimpse(coloursurvey)

```

## 

without a function

```{r}
my_levels <- c("Strongly disagree",
               "Disagree",
               "Neither agree nor disagree",
               "Agree",
               "Strongly agree")
```

```{r}
coloursurvey <- coloursurvey %>% 
  mutate(across(Blue:Yellow, ~ factor(.x, , levels = my_levels)))
```

## 

with a function

```{r}

likert_factor <- function(v){
  my_levels <- c("Strongly disagree",
               "Disagree",
               "Neither agree nor disagree",
               "Agree",
               "Strongly agree")
  v = factor(v, levels = my_levels)
}

```

## 

with a function adv: clarity due to name

```{r}
coloursurvey <- coloursurvey %>% 
  mutate(across(Blue:Yellow, ~ likert_factor(.x)))
```

## Document

Maybe ask ChatGTP to write documentation?

## Test

interactive

## Unit tests ??

with testthat? only simple examples. chatGTP/github copilot (not free)

## Summary functions

these take a vector and produce a single value could be an existing function where you need to set a lot of defaults

```{r}
# magnitude of a vector

magnitude <- function(v){
  sum(v^2) |> sqrt()
}

magnitude(c(6,8))

```

Short cuts:

-   put cursor on a function call and press F2 to find its definition
-   Ctrl+. opens section/file search - Need to demo this one.

# Dataframe functions

## Dataframe functions

Vector functions: useful when code is repeated within a dplyr verb function Data frame function: useful when the verbs are repeated dataframe functions take a df as the first argument, some additional arguments and return a dataframe or vector

we need to understand Indirection and tidy evaluation

## Indirection and tidy evaluation

## Data masking

## Tidy selection
