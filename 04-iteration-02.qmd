---
title: "useR to programmeR"
subtitle: "Iteration 2"
author: "Emma Rand and Ian Lyttle"
format: 
  revealjs:
    theme: [simple, styles.scss]
    footer: <https://pos.it/programming_r_24>
    slide-number: true
    chalkboard: true
    code-link: true
    code-line-numbers: false
    width: 1600
    height: 900
bibliography: references.bib
---

## Learning objectives

This session is (mostly) about functional programming:

::: {.incremental}
- Aside: managing file paths within your project
- Example: read a bunch of files, then put them in a single data frame
- Fundamental paradigms in {purrr}: 
   - `map()`, `keep()`, and `reduce()`
- Adverbs to handle failure
- More generally, using functions as arguments to functions ü§Ø
:::

. . .

<hr>

For coding, we will use `r-programming-exercises`:

-   Open `R/iteration-02-01-reading-files.R`.
-   Restart R.

## Aside: {here} package

For me, `here::here()` is a truly magical function:

::: {.incremental}
- useful in scripts: `.R` files (like today!)
- useful in documents: `.Rmd` and `.qmd` files
:::

. . .

If you need to:

  - refer to a file, and 
  - it's in a *fixed* place *within* your project

`here()` can make your life *much* simpler!

## Here: Example {auto-animate=true}

:::: {.columns}
::: {.column width="40px"}
```










üëã

```
:::

::: {.column}
```{.text}
/Users/ijlyttle/repos/programming-r-exercises/ 
|-- programming-r-exercises.Rproj 
|-- README.md
|-- LICENCE.md
|-- data/
    |-- gapminder/
        |-- 1952.xlsx
        |-- ...
    |-- ...
|-- R/ 
    |-- iteration-02-01-reading-files.R 
    |-- ...
```
:::
::::

<hr>

Within `iteration-02-01-reading-files.R`:

- `here("data/gapminder/1952.xlsx")`

Works just as well for `.Rmd`, `.qmd` files.

## Here: Searches {auto-animate=true}

:::: {.columns}
::: {.column width="40px"}
```









üîé


```
:::

::: {.column}
```
/Users/ijlyttle/repos/programming-r-exercises/ 
|-- programming-r-exercises.Rproj 
|-- README.md
|-- LICENCE.md
|-- data/
    |-- gapminder/
        |-- 1952.xlsx
        |-- ...
    |-- ...
|-- R/ 
    |-- iteration-02-01-reading-files.R 
    |-- ...
```
:::
::::


<hr>

- Looks in directory for an `.Rproj` file (simplified)
- Doesn't find one

## Here: Moves up and searches {auto-animate=true}

:::: {.columns}
::: {.column width="40px"}
```
üîé











```
:::

::: {.column}
```
/Users/ijlyttle/repos/programming-r-exercises/ 
|-- programming-r-exercises.Rproj 
|-- README.md
|-- LICENCE.md
|-- data/
    |-- gapminder/
        |-- 1952.xlsx
        |-- ...
    |-- ...
|-- R/ 
    |-- iteration-02-01-reading-files.R 
    |-- ...
```
:::
::::

<hr>

- Moves up one directory
- Looks again

## Here: Finds `.Rproj` {auto-animate=true}

:::: {.columns}
::: {.column width="40px"}
```

‚úÖ










```
:::

::: {.column}
```
/Users/ijlyttle/repos/programming-r-exercises/ 
|-- programming-r-exercises.Rproj 
|-- README.md
|-- LICENCE.md
|-- data/
    |-- gapminder/
        |-- 1952.xlsx
        |-- ...
    |-- ...
|-- R/ 
    |-- iteration-02-01-reading-files.R 
    |-- ...
```
:::
::::


## Here: Flags project-root {auto-animate=true}

:::: {.columns}
::: {.column width="40px"}
```
üö©











```
:::

::: {.column}
```
/Users/ijlyttle/repos/programming-r-exercises/ 
|-- programming-r-exercises.Rproj 
|-- README.md
|-- LICENCE.md
|-- data/
    |-- gapminder/
        |-- 1952.xlsx
        |-- ...
    |-- ...
|-- R/ 
    |-- iteration-02-01-reading-files.R 
    |-- ...
```
:::
::::

<hr>

`/Users/ijlyttle/repos/programming-r-exercises/`

## Here: Returns full path {auto-animate=true}

:::: {.columns}
::: {.column width="40px"}
```






üéØ





```
:::

::: {.column}
```
/Users/ijlyttle/repos/programming-r-exercises/ 
|-- programming-r-exercises.Rproj 
|-- README.md
|-- LICENCE.md
|-- data/
    |-- gapminder/
        |-- 1952.xlsx
        |-- ...
    |-- ...
|-- R/ 
    |-- iteration-02-01-reading-files.R 
    |-- ...
```
:::
::::

<hr>

```r
here("data/gapminder/1952.xlsx")
```

`/Users/ijlyttle/repos/programming-r-exercises/data/gapminder/1952.xlsx`

. . .

<hr>

::: {.caution-note}
`here()` returns a string that represents a path. 

It makes **no** guarantee that the path exists.
:::


## Here: Epilogue

`here()` works *especially* well if you need to rearrange your source (e.g. `.R`) files.

. . .

However, if you move your target files (e.g. `.xlsx`), you need to modify your source.

. . .

<hr>

The *here* way:

```r
read_excel(here("data/gapminder/1952.xlsx"))
```

. . .

<hr>

::: {.callout-note icon=false title="üßê Where `here()` can help"}
```r
read_excel("../data/gapminder/1952.xlsx")
```
:::

. . .

<hr>

::: {.callout-important icon=false title="üî• Meme Alert"}
Do not do this:

```r
setwd("/Users/ijlyttle/repos/programming-r-exercises/data/gapminder")

read_excel("1952.xlsx")
```
:::

## Reading multiple files

Iteration functions in {purrr} can help with repetitive tasks.

. . .

### Example

Read Excel files from a directory, then combine into a single data-frame.

## Our turn: Reading data manually

Here's our starting code:

``` r
data1952 <- read_excel(here("data/gapminder/1952.xlsx"))
data1957 <- read_excel(here("data/gapminder/1957.xlsx"))
data1962 <- read_excel(here("data/gapminder/1952.xlsx"))
data1967 <- read_excel(here("data/gapminder/1967.xlsx"))

data_manual <- bind_rows(data1952, data1957, data1962, data1967)
```

. . .

What problems do you see?

(I see two real problems, and one philosophical problem)

Run this example code, discuss with your neighbor.

## Our turn: Make list of paths

I see this as a two step problem:

::: incremental
-   make a named list of paths, name is year
-   use list of paths to read data frames, combine
:::

. . .

Let's work together to improve this code to get paths:

``` r
paths <-
  # get the filepaths from the directory
  fs::dir_ls(here("data/gapminder")) |>
  # convert to list
  # extract the year as names
  print()
```

## Our turn: Read data

Let's work together to improve this code to read data:

``` r
data <-
  paths |>
  # read each file from excel, into data frame
  # keep only non-null elements
  # set list-names as column `year`
  # bind into single data-frame
  # convert year to number
  print()
```

## Fundamental paradigms

Functional programming has three fundamental paradigms; they act on lists or vectors:

::: incremental
-   `map` - do *this* to each element: `purrr::map()`
-   `filter` - like spaghetti, not coffee: `purrr::keep()`
-   `reduce` - combine into new thing: `purrr::reduce()`
:::

. . . 

Each of these takes a *function* as an argument, to tell the operator *what* to do.

```{r echo=FALSE}
library("purrr")
```

. . .

<hr>

For coding, we will use `r-programming-exercises`:

-   Open `R/iteration-02-02-fundamental-paradigms.R`.
-   Restart R.

## Map: Intro {auto-animate=true}

```r
num <- 1:4
num |> map(\(x) x + 1)
```

<hr>

`map()` takes:

  - list or atomic vector
  - function to apply to each member of the vector

## Map: Intermediate result {auto-animate=true}

```r
num <- 1:4
num |> map(\(x) x + 1)
```

<hr>

| Input   | Result |
|:-------:|:------:|
| 1       | 2      |
| 2       |        |        
| 3       |        |      
| 4       |        |      


## Map: Result {auto-animate=true, auto-animate-unmatched=false}

```r
num <- 1:4
num |> map(\(x) x + 1)
```

<hr>

| Input   | Result |
|:-------:|:------:|
| 1       | **2**  |
| 2       | **3**  |        
| 3       | **4**  |      
| 4       | **5**  |   

## Map: Atomic variants

:::: {.columns}

::: {.column width="50%"}

`map()` always returns a list:

```{r}
num <- 1:4
num |> map(\(x) x + 1)
```
:::

::: {.column width="50%"}

Use an atomic variant to specify type:

```{r}
num <- 1:4
num |> map_int(\(x) x + 1)
```
:::

::::

## Keep: Intro {auto-animate=true}


```r
num <- 1:4
num |> keep(\(x) x %% 2 == 0)
```

<hr>

Outside {purrr}: known as `filter()`, but {dplyr} took this name first. 

`keep()` takes:

  - list or vector
  - function, when applied to each member, returns `TRUE` or `FALSE`
    - this is called a *predicate* function

## Keep: Intermediate result {auto-animate=true, auto-animate-unmatched=false}

```r
num <- 1:4
num |> keep(\(x) x %% 2 == 0)
```

<hr>

| Input   | Evaluation | Result |
|:-------:|:---------- |:------:|
| 1       | `FALSE`    |        | 
| 2       | `TRUE`     | 2      |
| 3       |            |        |              
| 4       |            |        |

## Keep: Result {auto-animate-unmatched=false}

```r
num <- 1:4
num |> keep(\(x) x %% 2 == 0)
```

<hr>

| Input   | Evaluation | Result |
|:-------:|:----------- |:------:|
| 1       | **`FALSE`** |        | 
| 2       | **`TRUE`**  | **2**  |
| 3       | **`FALSE`** |        |              
| 4       | **`TRUE`**  | **4**  |

## Reduce: Intro {auto-animate=true}

```r
num <- 1:4
num |> reduce(\(acc, x) acc + x)
```

<hr>

`reduce()` takes:

  - a list or vector
  - a *reducer* function, which takes two arguments:
    - the accumulated value
    - the "next" value of the input
    
## Reduce: First result {auto-animate=true}

```r
num <- 1:4
num |> reduce(\(acc, x) acc + x)
```

<hr>

| Input   | Result |
|:-------:|:------:|
| 1       | 1      |
| 2       |        |        
| 3       |        |      
| 4       |        |   

## Reduce: Intermediate result {auto-animate=true, auto-animate-unmatched=false}

```r
num <- 1:4
num |> reduce(\(acc, x) acc + x)
```

<hr>

| Input   | Result |
|:-------:|:------:|
| 1       |        |
| 2       | 3      |        
| 3       |        |      
| 4       |        |   

## Reduce: Result {auto-animate=true, auto-animate-unmatched=false}

```r
num <- 1:4
num |> reduce(\(acc, x) acc + x)
```

<hr>

| Input   | Result |
|:-------:|:------:|
| 1       |        |
| 2       |        |        
| 3       |        |      
| 4       | **10** |   

## Reduce: Initialize {auto-animate=true}

```r
num <- 1:4
num |> reduce(\(acc, x) acc + x, .init = 1)
```

<hr>

| Input   | Result |
|:-------:|:------:|
| 1       |        |
| 2       |        |        
| 3       |        |      
| 4       | **11** |  

## Reduce: Use existing functions

```r
num <- 1:4
num |> reduce(sum, .init = 1)
```

<hr>

| Input   | Result |
|:-------:|:------:|
| 1       |        |
| 2       |        |        
| 3       |        |      
| 4       | **11** |  

## Additional arguments

```{r}
num <- c(1, 2, 3, NA, 4)
num |> reduce(sum)
```

. . .

The default behavior for `sum()` is not to remove `NA` values.

. . .

<hr>

To change the behavior, use an anonymous function:

```{r}
num |> reduce(\(acc, x) sum(acc, x, na.rm = TRUE))
```

. . .

::: {.callout-caution title="No longer recommended"}

```r
# TODO: check that newer Quarto will fix font-size here
num |> reduce(sum, na.rm = TRUE)
```
::: 

Using an anonymous function will:

 - make it more explicit which argument goes to which function.
 - tend to yield better error messages.

## Variants and adverbs

Some useful variants, can mix and match:

::: incremental
 - `map_lgl()` , `map_int()`, `map_dbl()`, `map_chr()`
 - `walk()`: like `map()`, but called for side-effect
 - `imap()`, `lmap()`: use index or list-name as argument
 - `map2()`, `pmap()`: apply over sets of inputs
:::

. . .

Adverbs modify verbs (functions):

::: incremental
 - `possibly()`, `quietly()`, `slowly()`, `insistently()`, `safely()`
 - `negate()`: return the negative of a predicate
 - `compose()`: put two functions together
 - `partial()`: pre-fill some arguments of a function
:::

## Handling failures with adverbs

If we have a failure, we may not want to stop everything.

. . .

```{r}
#| error: true
library("readr")
read_csv("not/a/file.csv")
```

. . .

<hr>

For coding, we will use `r-programming-exercises`:

-   Open `R/iteration-02-03-adverbs.R`.
-   Restart R.

## Function operators a.k.a. adverbs

Function operators:

-   take a function 
-   return a modified function

. . .

```{r}
library("purrr")

poss_read_csv <- possibly(read_csv, otherwise = NULL, quiet = FALSE)
```

. . .

<hr>

```{r}
#| message: true
poss_read_csv("not/a/file.csv")
```

. . .

<hr>

```{r}
poss_read_csv(I("a, b\n 1, 2"), col_types = "dd")
```

## Our turn: Handle failure

In the `programming-r-exercises` repository:

-   look at `data/gapminder_party/`
-   try running your script using this directory

Create a new function:

``` r
possibly_read_excel <- possibly() # we do the rest
```

Use this function in your script.

## Our Turn: re-implement `list_rbind()`

Re-implement `list_rbind()` using functional-programming techniques:

``` r
data_reimplemented <-
  paths_party |>
  map(poss_read_excel) |>
  # keep(negate(is.null)) |>
  # imap(\(df, name) mutate(df, "year" := parse_number(name))) |>
  # reduce(rbind) |>
  print()
```

Let's run this, uncommenting one line at a time.

::: incremental
-   *keeps* not-`NULL` values, `purrr::keep()`
-   *maps* name of element to data-column, `purrr::imap()`
-   *reduces* list to single data-frame, `purrr::reduce()`
:::

## Functions as arguments

We often think of function arguments being things like numbers, strings, and lists.

Using functions, themselves, as arguments takes a little getting used-to.

Once you wrap your mind around it, it's like seeing in more dimensions.

. . .

<hr>

For coding, we will use `r-programming-exercises`:

-   Open `R/iteration-02-04-functions-as-arguments.R`.
-   Restart R.

## Labellers

```{r}
library("tidyverse")
library("palmerpenguins")

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point() +
  scale_color_discrete(labels = tolower) # tolower is a function
```

## If we have time

Three fundamental operations in functional programming

Given a list and a function:

::: incremental
-   `filter()`: make a new list, subset of old list
-   `map()`: make a new list, operating on each element
-   `reduce()`: make a new "thing"
:::

. . .

<hr>

For coding, we will use `r-programming-exercises`:

-   Open `R/iteration-02-05-dpurrr.R`.
-   Restart R.

## dplyr using purrr?

We can use `map()`, `filter()`, `reduce()` to "implement", using purrr:

-   `dplyr::mutate()`
-   `dplyr::filter()`
-   `dplyr::summarise()`

. . .

I claim it's possible, I don't claim it's a good idea.

## Tabular data: two perspectives

::: incremental
-   column-based: named list of column vectors

    ``` json
    {
      mpg: [21.0, 22.8, ...],
      cyl: [6, 4, ...],
      ...
    }
    ```

-   row-based: collection of rows, each a named list

    ``` json
    [
      {mpg: 21.0, cyl: 6, ...}, 
      {mpg: 22.8, cyl: 4, ...}, 
      ...
    ]
    ```
:::

## `dpurrr_filter()`

```{r}
dpurrr_filter <- function(df, predicate) {
  df |>
    as.list() |>
    purrr::list_transpose(simplify = FALSE) |>
    purrr::keep(predicate) |>
    purrr::list_transpose() |>
    as.data.frame() 
}
```

. . .

<hr>

```{r}
dpurrr_filter(mtcars, \(d) d$gear == 3) |> head()
```

## `dpurrr_mutate()`

```{r}
dpurrr_mutate <- function(df, mapper) {
  df |>
    as.list() |>
    purrr::list_transpose(simplify = FALSE) |>
    purrr::map(\(d) c(d, mapper(d))) |>
    purrr::list_transpose() |>
    as.data.frame() 
}
```

. . .

<hr>

```{r}
mtcars |> 
  dpurrr_mutate(\(d) list(wt_kg = d$wt * 1000 / 2.2)) |> 
  head()
```

## `dpurrr_summarise()`

```{r}
dpurrr_summarise <- function(df, reducer, .init) {
  df |>
    as.list() |>
    purrr::list_transpose(simplify = FALSE) |>
    purrr::reduce(reducer, .init = .init) |>
    as.data.frame()
}
```

. . .

<hr>

```{r}
mtcars |> 
  dpurrr_summarise(
    reducer = \(acc, val) list(
      wt_min = min(acc$wt_min, val$wt), 
      wt_max = max(acc$wt_max, val$wt)
    ),
    .init = list(wt_min = Inf, wt_max = -Inf)
  )
```

## With grouping

First, a little prep work:

```{r}
ireduce <- function(x, reducer, .init) {
  purrr::reduce2(x, names(x), reducer, .init = .init)
}

summariser <- purrr::partial(
  dpurrr_summarise,
  reducer = \(acc, val) list(
    wt_min = min(acc$wt_min, val$wt), 
    wt_max = max(acc$wt_max, val$wt)
  ),
  .init = list(wt_min = Inf, wt_max = -Inf)
)
```

## Et voil√†

```{r}
mtcars |> 
  split(mtcars$gear) |>
  purrr::map(summariser) |> 
  ireduce( 
    reducer = \(acc, x, y) rbind(acc, c(list(gear = y), x)),
    .init = data.frame()
  ) 
```

. . .

We can agree this presents no danger to dplyr.

. . .

In JavaScript, data frames are often arrays of objects (lists), so you'll see formulations like this (e.g. **tidyjs**).

## Summary

::: incremental
- {here} can help you manage file paths within projects.
- Functional programming:
    - has three fundamental paradigms:
      - filter (`purrr::keep()`), map, reduce
      - {purrr} offers variants and adverbs
- Adverbs can help you handle failure.
- Functions can be used as arguments to functions.
- Another view of data frames (if we had time).
:::

## Wrap-up

Please go to [pos.it/conf-workshop-survey](https://pos.it/conf-workshop-survey).

Your feedback is crucial!

Data from the survey informs curriculum and format decisions for future conf workshops, and we really appreciate you taking the time to provide it.

<hr>

### Thank you!

::: incremental
-   Emma
-   Lionel and Jonathan
-   Mine √áetinkaya-Rundel, Posit
-   **You** ü§ó
:::
